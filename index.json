{
    ".\\.env": {
        "hash": "680cfd0137489b07bf6d3e7b0a5345133b29b0bdea3dd123256bccb0704c2259",
        "summary": "This .env file contains configuration settings for a server, including environment variables for server port, JWT secret, MongoDB URI, frontend origin, and OAuth credentials for Google, Apple, and Facebook.",
        "functions": [],
        "variables": [
            "SERVER_PORT",
            "JWT_SECRET",
            "MONGO_URI",
            "FRONTEND_ORIGIN",
            "GOOGLE_CLIENT_ID",
            "GOOGLE_CLIENT_SECRET",
            "GOOGLE_CALLBACK_URL",
            "APPLE_CLIENT_ID",
            "APPLE_TEAM_ID",
            "APPLE_KEY_ID",
            "APPLE_PRIVATE_KEY",
            "APPLE_CALLBACK_URL",
            "FACEBOOK_APP_ID",
            "FACEBOOK_APP_SECRET",
            "FACEBOOK_CALLBACK_URL"
        ],
        "language": "dotenv"
    },
    ".\\.env.dev": {
        "hash": "371c209ee620c2b295bdbfdc32da636f7604658f7970b50eddd2f884f6b1e887",
        "summary": "This is a configuration file named .env.dev used for setting up environment variables in a development environment. It contains settings for server port, JWT secret, MongoDB URI, frontend origin, and OAuth credentials for Google and Apple.",
        "functions": [],
        "variables": [
            "SERVER_PORT",
            "JWT_SECRET",
            "MONGO_URI",
            "FRONTEND_ORIGIN",
            "GOOGLE_CLIENT_ID",
            "GOOGLE_CLIENT_SECRET",
            "GOOGLE_CALLBACK_URL",
            "APPLE_CLIENT_ID",
            "APPLE_TEAM_ID",
            "APPLE_KEY_ID",
            "APPLE_PRIVATE_KEY",
            "APPLE_CALLBACK_URL"
        ],
        "language": "Configuration file (dotenv)"
    },
    ".\\.gitignore": {
        "hash": "a77da4a14062400486f9cb04a8528d0725fb39c92145997661507b9c1d511463",
        "summary": "The .gitignore file contains patterns for files and directories that Git should ignore, such as logs, build artifacts, environment configuration files, editor-specific directories, and temporary files.",
        "functions": [],
        "variables": [],
        "language": "plaintext"
    },
    ".\\docker-compose.yml": {
        "hash": "491f5b4fe45b7c114e737c5557d02d9a428519ae2269bf88d16b391ae67fa7fe",
        "summary": "The docker-compose.yml file defines a service for running MongoDB using Docker. It maps port 27017 from the container to the host, allowing access to MongoDB via localhost. A volume named mongo_data is used to persist data stored in the database locally.",
        "functions": [],
        "variables": [
            "mongo",
            "mongo-container",
            "27017:27017",
            "mongo_data"
        ],
        "language": "YAML"
    },
    ".\\package-lock.json": {
        "hash": "b29a5f338ef99acf1e2372ef474329b8fac36a3732af5c17a4876f6e8bc23e00",
        "summary": "This is a package-lock.json file for a Node.js project named 'cltgigs_backend'. It lists various dependencies and devDependencies required by the project, including libraries for handling HTTP requests, authentication, database interactions, and security features. The lockfile version is 3, indicating it's using npm version 7 or later.",
        "functions": [],
        "variables": [],
        "language": "JavaScript"
    },
    ".\\package.json": {
        "hash": "d3cdf4da7bf311c0d1487e506ddd3f38e8f90ced1017785b360b356d4108aebd",
        "summary": "This is a package.json file for a Node.js project. It lists various dependencies required for the application, including libraries for database interaction (mongoose), authentication (passport and its strategies), security (helmet), HTTP requests (axios), and utility tools (faker). Additionally, it includes development dependencies such as testing frameworks (chai, mocha) and mocking libraries.",
        "functions": [],
        "variables": [],
        "language": "JavaScript"
    },
    ".\\server.js": {
        "hash": "ed777194c8f43524008af09d5c7a7c04be0a18f153c22e7c535ad611dd0213ad",
        "summary": "This is a server.js file that sets up an Express application with various middleware for security, rate limiting, and CORS. It also integrates Socket.io for real-time communication. The file imports several routes related to authentication, users, gigs, bids, messages, attachments, reviews, and reports.",
        "functions": [
            "init",
            "setupSocketIO"
        ],
        "variables": [
            "express",
            "cors",
            "helmet",
            "xss",
            "rateLimit",
            "mongoose",
            "path",
            "passport",
            "http"
        ],
        "language": "JavaScript"
    },
    ".\\client\\.env": {
        "hash": "a0af43edbaa8da7d106e703a79f030d17cc675507b275ae6da0e65faaa4151e5",
        "summary": "The .env file contains environment variables for a client application, specifying the API URL and server address.",
        "functions": [],
        "variables": [
            "VITE_API_URL",
            "VITE_SERVER"
        ],
        "language": "dotenv"
    },
    ".\\client\\.env.dev": {
        "hash": "b90383577f3f9336ca39598efdbdbdf1e94496b3d8b8a76012a2d0f29e7bb19c",
        "summary": "This is a configuration file for a development environment, setting up API and server URLs.",
        "functions": [],
        "variables": [
            "VITE_API_URL",
            "VITE_SERVER"
        ],
        "language": "dotenv (used in JavaScript/TypeScript projects)"
    },
    ".\\client\\.gitignore": {
        "hash": "f66d28e08b9d02b29b211eebdfb41018d0d83746c169ec19e9cc25ae536d3eef",
        "summary": "This .gitignore file is used to specify intentionally untracked files in a Git repository. It includes various types of logs, node modules, build directories, and editor-specific configuration files to be ignored by Git.",
        "functions": [],
        "variables": [],
        "language": "Git"
    },
    ".\\client\\components.json": {
        "hash": "5da1411bc73b138145a3f7928a69338a5a42f3fa4c2a7440f6a669fcfbceb0a4",
        "summary": "The components.json file configures settings for a client-side application, including styling, TypeScript support, Tailwind CSS integration, aliases for directory paths, and an icon library. It specifies the schema, style, and other development preferences.",
        "functions": [],
        "variables": [
            "$schema",
            "style",
            "rsc",
            "tsx",
            "tailwind.config.js",
            "src/index.css",
            "baseColor",
            "cssVariables",
            "prefix",
            "iconLibrary"
        ],
        "language": "JSON"
    },
    ".\\client\\eslint.config.js": {
        "hash": "dc00c7db700d03834d04a172ea709593ae5ef1bc750eb55dfc521a60d9e1baa0",
        "summary": "This is an ESLint configuration file for TypeScript projects using React. It includes recommendations from the JavaScript and TypeScript configurations, sets the ECMAScript version to 2020, defines browser globals, adds plugins for React hooks and refresh, and applies specific rules for React hooks with a warning if non-component exports are detected.",
        "functions": [],
        "variables": [
            "js",
            "globals",
            "reactHooks",
            "reactRefresh",
            "tseslint"
        ],
        "language": "JavaScript"
    },
    ".\\client\\index.html": {
        "hash": "ead739717aacaeff853b6ebae269ce64098669b1234f86bd4bc643638e7f0c09",
        "summary": "This is an HTML file for a Vite + React + TypeScript project. It includes meta tags for character set, viewport settings, and title. The body contains a div with id 'root' where the React application will be rendered, and a script tag that imports the main.jsx file as a module.",
        "functions": [],
        "variables": [],
        "language": "HTML"
    },
    ".\\client\\package-lock.json": {
        "hash": "9c0f031e47fe72b6f5fff1c0505602486b3c58f5260170aebadd928e732f9477",
        "summary": "This is a package-lock.json file for a Node.js project named 'client'. It lists various dependencies required by the project, including libraries for fontawesome icons, radix-ui components, axios for HTTP requests, and others.",
        "functions": [],
        "variables": [
            "lockfileVersion",
            "requires"
        ],
        "language": "JSON"
    },
    ".\\client\\package.json": {
        "hash": "5d592c5295c5256f3b033669dd0655cb64d956bdbd1a3d5ddff3a7358af03fbe",
        "summary": "This is a package.json file for a client-side project, configured with scripts for development, building, linting, and preview. It includes dependencies on various libraries and components from FontAwesome, Radix UI, Shadcn UI, Axios, and others.",
        "functions": [
            "dev",
            "build",
            "lint",
            "preview"
        ],
        "variables": [],
        "language": "JavaScript"
    },
    ".\\client\\postcss.config.js": {
        "hash": "190c877db466995bf1482f4a16abd06e04a89ede3119341e2a86ff96e1737b27",
        "summary": "The file exports a default configuration object for PostCSS, which includes two plugins: tailwindcss and autoprefixer.",
        "functions": [],
        "variables": [
            "plugins"
        ],
        "language": "JavaScript"
    },
    ".\\client\\tailwind.config.js": {
        "hash": "b19f2b25cab4e608c76fcd08ef5ea971316e361b5d7ee19b8cb9076adf624ccd",
        "summary": "This is a Tailwind CSS configuration file for a client project. It sets up dark mode, specifies content paths, and customizes the theme with extended font families, border radii, keyframes, and animations for accordion effects.",
        "functions": [],
        "variables": [
            "darkMode",
            "content",
            "theme"
        ],
        "language": "JavaScript"
    },
    ".\\client\\tsconfig.app.json": {
        "hash": "148b7c781c9aa2cc8736c18dff919a301057f45c467d456b625eb113a79dcd82",
        "summary": "The tsconfig.app.json file is a TypeScript configuration file for building an Angular application. It specifies compiler options such as target, module, and lib settings, as well as bundler mode configurations and linting rules. The file includes paths to source files and ensures strict type checking.",
        "functions": [],
        "variables": [
            "tsBuildInfoFile",
            "target",
            "useDefineForClassFields",
            "lib",
            "module",
            "skipLibCheck",
            "baseUrl",
            "paths",
            "moduleResolution",
            "allowImportingTsExtensions",
            "isolatedModules",
            "moduleDetection",
            "noEmit",
            "jsx",
            "strict",
            "noUnusedLocals",
            "noUnusedParameters",
            "noFallthroughCasesInSwitch",
            "noUncheckedSideEffectImports"
        ],
        "language": "TypeScript"
    },
    ".\\client\\tsconfig.json": {
        "hash": "b3ff28e241f4eb552d45c2f7869581e14cffc92a28541eec2b52fe7593a195b7",
        "summary": "The tsconfig.json file is a TypeScript configuration file that specifies compiler options and references to other configuration files. It sets up module resolution with a base URL and path mappings, and includes references to './tsconfig.app.json' and './tsconfig.node.json'.",
        "functions": [],
        "variables": [
            "baseUrl",
            "paths"
        ],
        "language": "TypeScript"
    },
    ".\\client\\tsconfig.node.json": {
        "hash": "d417b0be3b2264c26a4865d3a9ef788e8e7229da62ef2a88ed41a81e04eff668",
        "summary": "The tsconfig.node.json file is a TypeScript configuration file for a client project. It specifies compiler options such as target and module settings, bundler mode configurations, and linting rules.",
        "functions": [],
        "variables": [
            "tsBuildInfoFile",
            "target",
            "lib",
            "module",
            "skipLibCheck",
            "moduleResolution",
            "allowImportingTsExtensions",
            "isolatedModules",
            "moduleDetection",
            "noEmit",
            "strict",
            "noUnusedLocals",
            "noUnusedParameters",
            "noFallthroughCasesInSwitch",
            "noUncheckedSideEffectImports"
        ],
        "language": "TypeScript"
    },
    ".\\client\\vite.config.ts": {
        "hash": "77c152275b487a73957b3c34e86c215e3d3baf6d550416c4d58c573271980188",
        "summary": "This is a Vite configuration file for a React project. It defines aliases for paths and uses the React plugin.",
        "functions": [
            "defineConfig",
            "react"
        ],
        "variables": [
            "@"
        ],
        "language": "TypeScript"
    },
    ".\\client\\public\\vite.svg": {
        "hash": "4a748afd443918bb16591c834c401dae33e87861ab5dbad0811c3a3b4a9214fb",
        "summary": "The file contains an SVG image representing a Vite logo. It uses linear gradients for coloring and consists of multiple path elements to form the shape.",
        "functions": [],
        "variables": [],
        "language": "SVG"
    },
    ".\\client\\src\\App.jsx": {
        "hash": "0a095038262a10eb10397b8ebd03420723bc49a925d742149fa66e9046dcec25",
        "summary": "The App.jsx file is a React component that sets up routing for a web application using react-router-dom. It imports various pages and components, including Navbar, ProtectedRoute, and several page components like Home, Login, Register, etc. The App component renders these routes conditionally based on the user's authentication status and the current location.",
        "functions": [
            "App"
        ],
        "variables": [
            "location",
            "isMessagesPage"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\index.css": {
        "hash": "030c11c640692596ca7ef5fed18f556129523879faf5397d39b71804ccaa4a7e",
        "summary": "This CSS file is designed for a client-side application. It uses Tailwind CSS to apply base styles, components, and utilities. Custom styles are defined within the '@layer base' section, setting global properties like height, margin, padding, and overflow. The file also includes custom scrollbar styling for both webkit browsers (like Chrome and Safari) and Firefox, ensuring consistent appearance across different browsers. Additionally, it defines smooth transitions for progress bars and hover effects for specific elements.",
        "functions": [],
        "variables": [
            "--radius"
        ],
        "language": "CSS"
    },
    ".\\client\\src\\main.jsx": {
        "hash": "33c7c405e1f6018468b66c4715bcabaf8c1939505abef2079cbe37e37b669a08",
        "summary": "The provided file is a React application's main entry point. It sets up the React application by rendering the App component within a BrowserRouter for routing and an AuthProvider to manage authentication context.",
        "functions": [],
        "variables": [],
        "language": "JavaScript"
    },
    ".\\client\\src\\vite-env.d.ts": {
        "hash": "65996936fbb042915f7b74a200fcdde7e410f32a669b1ab9597cfaa4b0faddb5",
        "summary": "This TypeScript declaration file references Vite's client types, providing type definitions for Vite-specific modules and functionalities used in a client-side application.",
        "functions": [],
        "variables": [],
        "language": "TypeScript"
    },
    ".\\client\\src\\api\\axiosInstance.js": {
        "hash": "e64d6eb92cabc430e6832258ef73d74bbc9effe3c6f37ebf9da5e9122ac6e838",
        "summary": "This file contains an Axios instance configured for making HTTP requests to a specified base URL. It includes a request interceptor that adds an authorization token to headers if one exists in localStorage and logs the final request URL.",
        "functions": [
            "interceptors.request.use"
        ],
        "variables": [
            "token",
            "config"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\Attachment.jsx": {
        "hash": "0ede2e14681700cd41cb76ad0ff22306dbba71ab789a56d836c8a5120bf28be8",
        "summary": "This file contains a React component named 'Attachment' that renders an image from a provided URL. It checks if the 'fileUrl' is available; if not, it returns null. The image source is constructed by combining a server URL (from environment variables) with the file URL.",
        "functions": [
            "Attachment"
        ],
        "variables": [
            "fileUrl",
            "className",
            "serverUrl"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\CategoryBadge.jsx": {
        "hash": "c776537a2529d8707418c123c2ee3dac5cb3ada131baad37706611c9f0afa16f",
        "summary": "The CategoryBadge.jsx file is a React component that renders a badge with an icon and category name. It uses Lucide Icons for displaying icons, defaults to 'Tag' if the specified icon is not found, and applies styling based on the provided color.",
        "functions": [
            "CategoryBadge"
        ],
        "variables": [
            "category",
            "color",
            "icon",
            "IconComponent"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\Navbar.jsx": {
        "hash": "d99fad1454a249554046f265ee2cd10346158ca092c748215512c22891844524",
        "summary": "The Navbar.jsx file is a React component that represents the navigation bar for a web application. It uses context to access authentication data, integrates with Socket.IO for real-time notifications, and manages various UI states such as mobile menu open/close, notifications display, and profile dropdown. The component includes several icons from Lucide-react for visual elements like menu, bell, user, etc.",
        "functions": [
            "Navbar"
        ],
        "variables": [
            "mobileMenuOpen",
            "notificationsOpen",
            "profile",
            "unreadCount",
            "isProfileDropdownOpen"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\Notifications.jsx": {
        "hash": "9df98517f69885504d5b3a65e52f8e6929d3520fa1a69bc2676b0b234ccd4643",
        "summary": "This React component, Notifications, handles fetching and displaying user notifications. It uses context for authentication, state hooks for managing notifications, unread count, and user points. The component also includes mock achievement data and icons from react-icons.",
        "functions": [
            "fetchNotifications"
        ],
        "variables": [
            "token",
            "notifications",
            "unreadCount",
            "userPoints",
            "achievements"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\ProfilePicture.jsx": {
        "hash": "394fb90b2dd505dc64a8b8e5304a05c3e317639a69c12dd32c3c4335047a416f",
        "summary": "The ProfilePicture.jsx file is a React component that renders a profile picture with optional fallbacks and debugging.",
        "functions": [
            "ProfilePicture"
        ],
        "variables": [
            "profilePicUrl",
            "profile_pic_url",
            "name",
            "size",
            "className",
            "sizeClass",
            "imageUrl"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\ProtectedRoute.jsx": {
        "hash": "a6143bc5e87b6d3ca247bbb6baf4b23ff726e743eb37ba8a8e1fda0c717c8207",
        "summary": "This React component, ProtectedRoute, checks for a user's authentication token. If the token is absent, it redirects to the login page; otherwise, it renders its children components.",
        "functions": [
            "ProtectedRoute"
        ],
        "variables": [
            "token",
            "children"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\ReportButton.jsx": {
        "hash": "e7b6565c9a5b2a6e7e1d087026b3e9a92af17efa0f33197ebc2a857ed7329672",
        "summary": "This is a React component named ReportButton which allows users to report content. It includes state management for modal visibility and report details, uses axios to send reports to the backend, and leverages an authentication context to get user data.",
        "functions": [
            "handleReport"
        ],
        "variables": [
            "isModalOpen",
            "setIsModalOpen",
            "reportDetails",
            "setReportDetails",
            "userData",
            "contentId",
            "contentType",
            "creatorId",
            "reportData"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\ui\\accordion.tsx": {
        "hash": "6e832988a4ea9c6fa8a83ff783a2bb7276d3e8144e7e4146afdc5359488905da",
        "summary": "The provided TypeScript code defines an accordion component using the Radix UI library, customizing it with a ChevronDown icon and additional styling. The AccordionItem and AccordionTrigger components are extended from their original primitives to include specific class names for styling purposes.",
        "functions": [
            "AccordionItem",
            "AccordionTrigger"
        ],
        "variables": [
            "cn",
            "AccordionPrimitive",
            "ChevronDown"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\alert.tsx": {
        "hash": "f47c1b0e9c6e3ef670851af7796f5edb2c493cc6ed32624ab2a6dae421717eef",
        "summary": "This TypeScript file defines a React component named 'Alert' that is styled using Tailwind CSS classes. The Alert component can have different variants ('default' and 'destructive') which modify its appearance, such as background color, text color, and border styles.",
        "functions": [
            "Alert"
        ],
        "variables": [
            "alertVariants"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\avatar.tsx": {
        "hash": "c2b520fc8ae20b7cc3436b9e150aad4cfc889abef9950a4ae53c82e044b14f7b",
        "summary": "This TypeScript React component defines an Avatar UI element with nested components for displaying images and fallbacks. It utilizes the Radix UI library's avatar primitives, styled with custom CSS classes.",
        "functions": [
            "Avatar",
            "AvatarImage",
            "AvatarFallback"
        ],
        "variables": [
            "className",
            "props",
            "ref"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\badge.tsx": {
        "hash": "3efc1f576cf6a764678e319591f6e42abde67d2438bc09c64b1cdf776d4768e6",
        "summary": "The file contains a React component for a badge with various styling variants using class-variance-authority (cva) and Tailwind CSS classes. It includes default, secondary, destructive, and outline styles.",
        "functions": [
            "badgeVariants"
        ],
        "variables": [
            "cn",
            "React"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\button.tsx": {
        "hash": "5ede5be1283edf03518dab482c2d8adef31251e0d364b1e824fdde8f1d46b3f7",
        "summary": "This TypeScript file defines a button component with various styling variants using the class-variance-authority library. It includes default, destructive, and outline styles, along with handling for focus states, disabled states, and dark mode themes.",
        "functions": [
            "buttonVariants"
        ],
        "variables": [
            "cn",
            "Slot"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\card.tsx": {
        "hash": "df5e6614c395c6a2b01c794780dae4e8500877ad4dc17f383ce7d81c30e76a72",
        "summary": "This TypeScript React component file defines a Card and its associated header, title, content, footer, image, and item components with specific styles and functionalities.",
        "functions": [
            "Card",
            "CardHeader",
            "CardTitle"
        ],
        "variables": [],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\dot-pattern.tsx": {
        "hash": "c15a4cf8b5849f4226e9cfbd1b61cd241526f99d1b23d56bb40ca9c9024fdaae",
        "summary": "The file defines a React component called DotPattern which renders an SVG pattern consisting of dots. It accepts various props to customize the pattern's appearance, such as dimensions and circle properties.",
        "functions": [
            "DotPattern"
        ],
        "variables": [
            "width",
            "height",
            "x",
            "y",
            "cx",
            "cy",
            "cr",
            "className",
            "id"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\input.tsx": {
        "hash": "aae06d77f5ebc20313c700f017e2d874e8010aebe200e8e0c6e7b45f2916793d",
        "summary": "The file contains a React component named 'Input' that renders an HTML input element with specific styling and functionality. It uses Tailwind CSS classes for styling and includes handling for various props and states like focus, disabled, and dark mode.",
        "functions": [
            "Input"
        ],
        "variables": [
            "className",
            "type",
            "props",
            "ref"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\label.tsx": {
        "hash": "e69cfc27d78c9ef31b248ab8ea4fa54327c1038843f70efb5cd85d54c0bf1e0e",
        "summary": "The file is a React component for creating labels using the Radix UI library. It defines a `Label` component with custom styles and integrates it with the class-variance-authority (cva) utility for styling.",
        "functions": [
            "Label"
        ],
        "variables": [
            "labelVariants"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\scroll-area.tsx": {
        "hash": "0f88e697fbe70095b061c5a19f52f6123792a47aee7cd6c9087aaecad73a88e1",
        "summary": "This TypeScript file defines a custom ScrollArea component using Radix UI primitives. It includes a ScrollBar component for scrolling functionality and applies custom styles and class names.",
        "functions": [
            "ScrollArea",
            "ScrollBar"
        ],
        "variables": [],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\select.tsx": {
        "hash": "75a7a9a82af13bac8dff07ac2cb68bcc7e332f1de0ac638e831d921652b1d7a8",
        "summary": "The file defines a custom select component using React and Radix UI, along with Lucide icons for visual elements. It exports components like Select, SelectGroup, SelectValue, and a customized SelectTrigger with specific styling.",
        "functions": [
            "SelectTrigger"
        ],
        "variables": [
            "ChevronDown",
            "ChevronUp",
            "Check"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\separator.tsx": {
        "hash": "dae52b3e19fde1cbd658fdcbe575c88af0202d2240ec73da65069b47eec5974c",
        "summary": "The file contains a React component called Separator, which is used to visually separate content in a user interface. It leverages the Radix UI library's SeparatorPrimitive and applies custom styles based on orientation (horizontal or vertical). The component can be customized with additional class names and props.",
        "functions": [
            "Separator"
        ],
        "variables": [],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\sheet.tsx": {
        "hash": "186bfe08b3378a6224cc4852f305e3f72c7c44321a788edcbc32c75d48021fc3",
        "summary": "The file defines a custom Sheet component in TypeScript using React and Radix UI primitives. It includes variants for styling and animations, as well as components for triggering, closing, and displaying the sheet with an overlay.",
        "functions": [
            "Sheet",
            "SheetTrigger",
            "SheetClose",
            "SheetPortal",
            "SheetOverlay"
        ],
        "variables": [
            "sheetVariants"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\tabs.tsx": {
        "hash": "bc6b5439bfc7d9c8adcd64b3a3661c3fea158b7f98509a00e50fda581de8ce72",
        "summary": "The file contains a React component for implementing tabs using the Radix UI library. It defines custom styles and behavior for the Tabs, TabsList, and TabsTrigger components.",
        "functions": [
            "Tabs",
            "TabsList",
            "TabsTrigger"
        ],
        "variables": [
            "TabsPrimitive",
            "cn"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\textarea.tsx": {
        "hash": "c58cb6690a8f09cdda7fa2beb546a9ca954bd3c63ba28daba958a6dea326437c",
        "summary": "The file contains a React component named Textarea, which is a styled textarea element. It uses forwardRef to pass ref and additional props to the HTMLTextAreaElement.",
        "functions": [
            "Textarea"
        ],
        "variables": [
            "className",
            "ref",
            "props"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\context\\AuthContext.jsx": {
        "hash": "3bb43c30030ea5587ab40b5a037423548e98366fdd3271356b44a4dca86af5f4",
        "summary": "The AuthContext.jsx file defines an authentication context and provider for a React application. It uses JWT tokens to manage user sessions, storing them in local storage and decoding them to extract user data.",
        "functions": [
            "login",
            "logout"
        ],
        "variables": [
            "token",
            "userData"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\lib\\utils.ts": {
        "hash": "7c8c3dfc0cdd370d44932828eb067ef771c8fe7996693221d5d4b90af6d54f2d",
        "summary": "The file contains a utility function 'cn' that combines class names using 'clsx' and 'tailwind-merge'.",
        "functions": [
            "cn"
        ],
        "variables": [],
        "language": "TypeScript"
    },
    ".\\client\\src\\pages\\BidForm.jsx": {
        "hash": "9cc895b7f9de95884dd6c627ebe43a53bae249d16a8abb20b3fa13edbeb5b491",
        "summary": "The BidForm component is a React component that allows users to place bids on gigs. It fetches gig details from an API and displays them, along with input fields for bid amount and message. The component uses context for authentication and routing.",
        "functions": [
            "BidForm"
        ],
        "variables": [
            "gigId",
            "token",
            "user",
            "amount",
            "message",
            "gigData",
            "loading",
            "error"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Bids.jsx": {
        "hash": "aa92fd8d8f2a8621e4034290ddcdf73f188f5fedfdb1d166e989f8d11f7de9ae",
        "summary": "This React component, Bids.jsx, fetches and displays bids for a specific gig identified by 'gigId'. It allows users to create new bids with an amount and optional attachment. The component uses Axios for API requests and handles form data using FormData.",
        "functions": [
            "fetchBids",
            "handleCreateBid"
        ],
        "variables": [
            "bids",
            "amount",
            "bidAttachment",
            "gigId"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\CommunityCard.jsx": {
        "hash": "67a82a2c12af4ed3f57e307f9b95b83a0300259cbfeab3d74c4eaf79a447575a",
        "summary": "The CommunityCard.jsx file is a React component that displays a user's profile information, skills, and reviews. It fetches data from an API using axios and manages state with useState and useContext hooks. The component includes various UI elements for displaying icons, charts, and interactive features like sharing and editing. It also utilizes Framer Motion for animations and Toastify for notifications.",
        "functions": [
            "CommunityCard"
        ],
        "variables": [
            "userId",
            "token",
            "userData",
            "profile",
            "reviews"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\CreateGig.jsx": {
        "hash": "00f41d150256494c2e04df36368ae0a69bd4b79e3bfc06311517f5c25823ad70",
        "summary": "This is a React component for creating a gig. It includes steps for setting up the gig details, such as title, description, category, location, dates, and rewards. The component uses state management to track user progress through various stages of the gig creation process and integrates with an API using Axios.",
        "functions": [
            "CreateGig"
        ],
        "variables": [
            "navigate",
            "step",
            "xpEarned",
            "showSuccess",
            "completionPercentage",
            "title",
            "description",
            "category",
            "zipcode",
            "startDate",
            "completionDate"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Dashboard.jsx": {
        "hash": "8c6293cc74874a0ba8d09f430932a922244481b70f77e788695a85678d38243e",
        "summary": "The Dashboard.jsx file is a React component that renders a dashboard layout. It includes a navbar with branding and user information, and a grid container for content organization. The sidebar displays user profile information.",
        "functions": [
            "Dashboard"
        ],
        "variables": [],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\EditGig.jsx": {
        "hash": "df5ec2686f23da3b72dc73b7d465e122f877a90284bc2e6943e0b15d44bfff65",
        "summary": "The EditGig.jsx file is a React component that allows users to edit gig details. It uses state management with useState and useEffect hooks, as well as routing with useNavigate and useParams from react-router-dom. The component includes form fields for title, description, category, zipcode, startDate, endDate, duration, price, minOrder, maxOrder, files, tags, services, and reviews. It also handles file uploads and integrates with an API using axiosInstance.",
        "functions": [
            "EditGig"
        ],
        "variables": [
            "navigate",
            "gigId",
            "step",
            "showSuccess",
            "completionPercentage",
            "existingAttachment",
            "title",
            "description",
            "category",
            "zipcode",
            "startDate"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\GigDetails.jsx": {
        "hash": "f86e958af11c0e58f6bdfe8ded0c91b9cf89ad3098c0b7e4c1af9f9071d220e9",
        "summary": "This is a React component for displaying gig details. It fetches gig information, handles bids, and displays various gig attributes such as price, skills, location, and more.",
        "functions": [
            "GigDetails"
        ],
        "variables": [
            "gigId",
            "gig",
            "attachments",
            "bids",
            "bidAmount",
            "bidMessage",
            "isLoading",
            "error"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Gigs.jsx": {
        "hash": "7d762221ce7da0b824d679225179b13a0b6b30c259853cc8cfdd0cb2980cef58",
        "summary": "This React component, Gigs.jsx, fetches a list of gigs from an API and displays them. It also allows users to open a modal for submitting a bid on a selected gig, where they can input an amount, message, and file.",
        "functions": [
            "fetchGigs",
            "openBidModal",
            "closeBidModal"
        ],
        "variables": [
            "gigs",
            "selectedGig",
            "showBidModal",
            "bidAmount",
            "bidMessage",
            "bidFile",
            "userData"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Home.jsx": {
        "hash": "22fa8894e104a73a6fe850dc42fdd3dd48b102107db9d7ab8e0d1d5831316472",
        "summary": "The Home.jsx file is a React component that utilizes Framer Motion for animations and react-router-dom for navigation. It imports various icons from Lucide-react, an SVG icon library, and uses Axios to make API calls. The file includes a skeleton loading component and functions to retrieve category details with gradients.",
        "functions": [
            "SkeletonCard",
            "getCategoryDetails"
        ],
        "variables": [
            "AuthContext",
            "axiosInstance"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Login.jsx": {
        "hash": "08192b7bc3874f88d5dfe76da3e011dc63ea64620033c2fbd3c3ff4bf7081b97",
        "summary": "The Login.jsx file is a React component responsible for handling user login functionality. It uses Axios to send login requests and context (AuthContext) to manage authentication state. The component handles token-based logins via query parameters and form submissions, navigating users to the home page upon successful login or displaying errors if authentication fails.",
        "functions": [
            "handleSubmit"
        ],
        "variables": [
            "formData",
            "error",
            "searchParams",
            "token",
            "res"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Messages.jsx": {
        "hash": "1ef93a359e06e222a1e399b4fea81ad1f87f02faf7a4f25cc5d7be9d3dd994ec",
        "summary": "The Messages.jsx file is a React component that handles messaging functionality. It imports necessary dependencies, sets up state management for conversations and messages, and provides UI elements for user interaction such as sending messages, attaching files, and displaying conversation options.",
        "functions": [
            "useEffect",
            "useState",
            "useContext",
            "useRef",
            "useCallback"
        ],
        "variables": [
            "token",
            "userData",
            "userId",
            "navigate",
            "urlConversationId",
            "conversations",
            "activeConversation",
            "messages"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\MyBids.jsx": {
        "hash": "2d869a6a4ce05c20328a99c9a169b765e18d7f46dcb27d955ca6bfa064a8a1e2",
        "summary": "This React component, MyBids.jsx, fetches and displays a list of bids for the authenticated user. It includes functions to handle message navigation and render star ratings based on bid ratings.",
        "functions": [
            "fetchMyBids",
            "handleMessage",
            "renderStarRating"
        ],
        "variables": [
            "bids",
            "userData",
            "navigate"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\MyGigs.jsx": {
        "hash": "728380d2fe6489b504d7e48633e324212466d40b823fb28cfbd6af4b1c64cfb6",
        "summary": "This React component, MyGigs.jsx, displays a user's gigs and related information. It fetches gig data from an API, manages state for active tabs, selected gigs, bids, sorting options, and hover states. The component uses hooks like useEffect and useContext, and integrates with routing using react-router-dom. It also incorporates animations with framer-motion and utilizes various icons from different libraries to enhance UI elements.",
        "functions": [
            "MyGigs"
        ],
        "variables": [
            "activeTab",
            "gigs",
            "myBids",
            "selectedGigId",
            "bids",
            "sortBy",
            "hoveredGig",
            "xpProgress"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Register.jsx": {
        "hash": "4981052d11de2b9db5f1af8b025f6f0853a6f2b7e04560c24eab067921eac408",
        "summary": "The Register.jsx file is a React component responsible for handling user registration. It uses Axios to send registration data to an API endpoint and redirects the user to the login page upon successful registration. It also handles errors by displaying them to the user.",
        "functions": [
            "handleSubmit"
        ],
        "variables": [
            "formData",
            "error"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\SearchResults.jsx": {
        "hash": "e33a412733741b560a9d99edcc079afb00e76be77c100f210c00f3177f19e37c",
        "summary": "This React component (SearchResults) fetches gig data based on search parameters from a server and displays it in paginated form. It includes functionality to handle loading states, pagination navigation, and redirects.",
        "functions": [
            "SkeletonCard",
            "SearchResults"
        ],
        "variables": [
            "location",
            "navigate",
            "queryParams",
            "gigs",
            "totalGigs",
            "page",
            "isLoading",
            "limit",
            "totalPages"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Settings.jsx": {
        "hash": "9e01d1d2e0fda8e2aedfe18f72b49a97bd22d0128cd61178facdb4d385d23687",
        "summary": "The Settings.jsx file is a React component that handles user settings and profile management. It fetches user data, allows editing of profile information such as name, bio, location, portfolio, email, notifications, and two-factor authentication, and includes functionality for uploading profile pictures. The component uses context for authentication and integrates with an API for fetching and saving data.",
        "functions": [
            "Settings",
            "fetchProfile",
            "updateProfile"
        ],
        "variables": [
            "profile",
            "formData",
            "selectedFile",
            "activeTab",
            "progress",
            "isSaving"
        ],
        "language": "JavaScript"
    },
    ".\\config\\db.js": {
        "hash": "cad9a5707a5088310e07ff2b273ae4f6bb8dcc27acc2445ea5a3af5192ffe60d",
        "summary": "This file is a configuration script for connecting to a MongoDB database using Mongoose in a Node.js application. It defines an asynchronous function `connectDB` that attempts to establish a connection to the database specified by the environment variable `MONGO_URI`. If successful, it logs 'MongoDB connected' to the console; otherwise, it logs the error and exits the process.",
        "functions": [
            "connectDB"
        ],
        "variables": [
            "mongoose",
            "process.env.MONGO_URI"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\attachmentController.js": {
        "hash": "9a8b2e1fb7f6da8f6071b97e7b475bd66ccc6e547332f89971d27ce17e466930",
        "summary": "The attachmentController.js file contains two main functions for handling attachments: uploadAttachmentGeneral and getAttachment. It uses the Attachment model to save uploaded files with metadata such as type and foreign_key_id, and it retrieves attachments by their ID.",
        "functions": [
            "uploadAttachmentGeneral",
            "getAttachment"
        ],
        "variables": [
            "req",
            "res",
            "attachmentId",
            "type",
            "foreign_key_id",
            "attachment"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\authController.js": {
        "hash": "20d87b9d4307b2693d236966d64f8cf576c20593cd67d8b2e59f7d361debb748",
        "summary": "The file `authController.js` contains two main functions for user authentication: one for registering a new user and another for logging in an existing user. The registration function checks if a user already exists, hashes the password using bcrypt, and saves the new user to the database. The login function verifies the user's credentials and generates a JSON Web Token (JWT) upon successful authentication.",
        "functions": [
            "registerUser",
            "loginUser"
        ],
        "variables": [
            "bcrypt",
            "jwt",
            "User",
            "name",
            "email",
            "password",
            "existingUser",
            "salt",
            "hashedPassword",
            "user"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\bidController.js": {
        "hash": "1ffade29577fb6ee59cda2d8b70db43722346933bcf3617e0a11d8045717c29e",
        "summary": "This file contains a controller for handling bid-related operations in an application. It includes functions to create bids and interact with various models such as Bid, Gig, Notification, Conversation, and Message. The code uses asynchronous programming and interacts with a database through Mongoose models.",
        "functions": [
            "createBid"
        ],
        "variables": [
            "Bid",
            "Gig",
            "Notification",
            "Conversation",
            "Message"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\gigController.js": {
        "hash": "307eccc666adc2eceb410142bdca7140898bc49739a5978902cbfe54852146ae",
        "summary": "This JavaScript file contains a controller for handling gig-related operations. It includes functions to get all gigs with various filters such as search term, category, sorting, pagination, location, budget, volunteer status, and tags.",
        "functions": [
            "getAllGigs"
        ],
        "variables": [
            "Gig",
            "Bid",
            "Attachment",
            "resizeImage",
            "findZipcodesWithinWithDistance"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\messageController.js": {
        "hash": "3c36e3184b97dd35072d2a2218c6fabed5871ada66a3bbf1b108a87f663a8228",
        "summary": "The file `messageController.js` is a Node.js controller responsible for handling message-related API requests. It includes functions to retrieve all conversations for a user, send messages, and mark messages as read.",
        "functions": [
            "getAllConversationsForUser",
            "sendMessage",
            "markMessagesAsRead"
        ],
        "variables": [
            "getIO",
            "Conversation",
            "Message",
            "User",
            "Gig",
            "Bid",
            "mongoose",
            "Notification"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\notificationController.js": {
        "hash": "ac69a9837945e9d28ada2081c893365b4d4e7c8f9e5e6fe4a112ccd9b62e081b",
        "summary": "This JavaScript file, located at .\\controllers\\notificationController.js, contains two asynchronous functions for handling user notifications. The first function, getNotifications, retrieves up to 50 most recent notifications for a specific user from the Notification model. The second function, markAsRead, marks a specified notification as read.",
        "functions": [
            "getNotifications",
            "markAsRead"
        ],
        "variables": [
            "userId",
            "notifications",
            "notificationId",
            "notification"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\reviewController.js": {
        "hash": "9737d15ecee094019f9d69616e25bb15a65da589d32548331c7074981928e102",
        "summary": "This JavaScript file contains two functions for handling reviews in a user-based system. It exports methods to get reviews by a specific user and to create a new review for a user.",
        "functions": [
            "getReviewsByUser",
            "createReview"
        ],
        "variables": [
            "userId",
            "reviewerId",
            "user",
            "reviewer",
            "rating",
            "comment"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\userController.js": {
        "hash": "5c75a38523c46acfb7a2b193947bc508f933b1cf40d5ba32f2283335f6139c9d",
        "summary": "This JavaScript file contains functions for user operations such as retrieving a public profile, checking block status, and uploading certifications. It interacts with a User model to perform database operations.",
        "functions": [
            "getPublicProfile",
            "checkBlockStatus",
            "uploadCertifications"
        ],
        "variables": [
            "User",
            "req",
            "res",
            "userId",
            "currentUser",
            "isBlocked",
            "files",
            "fileUrls"
        ],
        "language": "JavaScript"
    },
    ".\\middlewares\\auth.js": {
        "hash": "8de857ace173f59b066f3a23a29e5018cfbecb2fca3cf67f7358f7fb6bd3dc49",
        "summary": "The .\\middlewares\\auth.js file contains an authentication middleware for a Node.js application using JWT. It checks for an authorization header, extracts a token, verifies it with a secret key, and attaches the decoded user information to the request object if valid.",
        "functions": [
            "authenticate"
        ],
        "variables": [
            "jwt",
            "authHeader",
            "token",
            "decoded",
            "err"
        ],
        "language": "JavaScript"
    },
    ".\\middlewares\\upload.js": {
        "hash": "3c897bbef88a5d1d20dc83d99748a11db9564fde3718ebb7c6522f8549b44e31",
        "summary": "This file sets up a middleware for handling file uploads using Multer in Node.js, specifically tailored for storing images temporarily. It includes functions to filter files based on their MIME type and stores them with unique filenames.",
        "functions": [
            "gigFileFilter",
            "generalFileFilter"
        ],
        "variables": [
            "storage"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Attachment.js": {
        "hash": "dcade488eba1ec687c35b75e0245839ae54b80626ba60c67c946eedf2c08e541",
        "summary": "This JavaScript file defines a Mongoose schema for an 'Attachment' model. The schema includes fields for type, foreign key ID, file URL, and upload timestamp.",
        "functions": [],
        "variables": [
            "attachmentSchema"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Bid.js": {
        "hash": "d4aae5ec782059dcdbef22720e5e4e7c7b10c15291e847f7e201f5034b1f94ff",
        "summary": "The file defines a Mongoose model for 'Bid' with fields including gig_id, user_id, amount, message, accepted status, rejected status, conversation_id, created_at timestamp, and overall status. It also includes a unique index on gig_id and user_id.",
        "functions": [],
        "variables": [
            "bidSchema"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Conversation.js": {
        "hash": "5a9fdb2cd0652aefefb9d0474e62eea48b3341398089d7e09673ea855a5d5a4a",
        "summary": "The file defines a Mongoose schema for a 'Conversation' model, which includes fields such as gig_id, gig_owner_id, bidder_id, bid_id, blocked_by_owner, blocked_by_bidder, locked, and created_at. The model is exported for use in other parts of the application.",
        "functions": [],
        "variables": [
            "conversationSchema"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Gig.js": {
        "hash": "f2ac2b8ce5a874f73c8ec071b45093ecdf0e8b152b21e242eae369be55396b13",
        "summary": "This file defines a Mongoose schema for 'Gig', which represents job listings or tasks with various attributes like title, description, category, location, dates, team size, tasks, and budget. The schema includes validations and default values for certain fields.",
        "functions": [
            "validator"
        ],
        "variables": [
            "mongoose",
            "gigSchema"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Message.js": {
        "hash": "fe51622e6b3b3bb4ed39788eaf87b39b828ff332701fcfdde55d5abbe0df623c",
        "summary": "This is a Mongoose model for a 'Message' in a messaging application. It defines the schema for messages, including fields like conversation_id, sender_id, content, file_url, reported status, and creation timestamp.",
        "functions": [],
        "variables": [
            "messageSchema",
            "mongoose"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Notification.js": {
        "hash": "8f54d80d69536b419a5de3a166aeaf6e8ec7e7e6e66b34749f7ab20b65feae9f",
        "summary": "The Notification.js file defines a Mongoose schema for notifications, including fields such as user_id, type, message, read status, an optional link, and a creation timestamp. It exports a Mongoose model based on this schema.",
        "functions": [],
        "variables": [
            "mongoose",
            "notificationSchema"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Report.js": {
        "hash": "85fc7ba56d209a01927bd68fa09092e47bd0f5efb6b0d3384d6bb123dc0f2d4e",
        "summary": "The file defines a Mongoose schema for a 'Report' model, which includes fields for reporter ID, creator ID, content ID, content type, report details, and timestamp. It exports the Report model based on this schema.",
        "functions": [
            "mongoose.Schema",
            "Date.now"
        ],
        "variables": [
            "reportSchema"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Review.js": {
        "hash": "63b13a86bf51b4b4f2191cf2130a19bc29c556cc9d4b42f56bb87cefcdfdca4d",
        "summary": "This file defines a Mongoose schema for a 'Review' model, which includes fields for user IDs, reviewer IDs, ratings, comments, and dates. It exports the Review model.",
        "functions": [],
        "variables": [
            "reviewSchema"
        ],
        "language": "JavaScript"
    },
    ".\\models\\User.js": {
        "hash": "27be40109ea1e68f3feadfe4a70d9f5a5fb57558fdf60af3bb460d3e191ca68b",
        "summary": "This is a Mongoose schema definition for a User model. It includes fields for personal information, contact details, skills and expertise, availability, and portfolio/work samples.",
        "functions": [],
        "variables": [
            "userSchema",
            "mongoose"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Zipcode.js": {
        "hash": "612f696b9402623af243e8a3fcdc7ff8d36f44a07947f71abec247c624d62679",
        "summary": "The file defines a Mongoose model for handling zipcode data, including fields for zip code and location with geospatial coordinates. It also sets up a 2dsphere index for efficient geospatial queries.",
        "functions": [
            "mongoose.model"
        ],
        "variables": [
            "zipcodeSchema",
            "location.coordinates"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\attachmentRoutes.js": {
        "hash": "bc94e8c21d88d225ba617a4c56eed82da6c866c783f34812f11190914408e9f6",
        "summary": "This is an Express.js router file that defines routes for handling attachment uploads, retrieval, and deletion. It uses middleware for authentication and file upload.",
        "functions": [
            "uploadAttachmentGeneral",
            "getAttachment",
            "deleteAttachment"
        ],
        "variables": [
            "express",
            "router",
            "authenticate",
            "uploadMiddleware"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\authRoutes.js": {
        "hash": "308cfd75e0f1177b2201785b5f902cee168453d6383a1cb39eed410f936ebcee",
        "summary": "This file contains authentication routes for an Express.js application, including traditional email/password registration and login, as well as OAuth2.0 integration for Facebook and Google logins. It uses Passport.js for authentication middleware and JWT (JSON Web Tokens) for user sessions.",
        "functions": [
            "registerUser",
            "loginUser",
            "generateToken"
        ],
        "variables": [
            "jwt",
            "router"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\bidRoutes.js": {
        "hash": "0dcf8d32016c5e3a53778c3eed05716eed3bd7bb16487ef3fd4e3da7dc8ed372",
        "summary": "This is a file containing routes for handling bidding operations in an application. It defines various endpoints such as creating a bid, retrieving bids for a specific gig, accepting or denying a bid, and updating bid status. The file uses Express.js and includes middleware for authentication.",
        "functions": [
            "createBid",
            "getBidsForGig",
            "acceptBid",
            "denyBid",
            "getMyBids",
            "undenyBid",
            "deleteBid",
            "updateBidStatus"
        ],
        "variables": [
            "express",
            "router",
            "authenticate"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\gigRoutes.js": {
        "hash": "af2cc48a10bcfe2cd878f219c0861fabdb7c3750ec354daa0d821fbb65a78f99",
        "summary": "This file contains route definitions for handling gig-related requests in an Express.js application. It includes endpoints for getting all gigs, creating a new gig with authentication and image upload middleware, retrieving gig details, listing the user's own gigs, updating an existing gig with authentication and optional image upload, and deleting a gig with authentication.",
        "functions": [
            "getAllGigs",
            "createGig",
            "getGigDetails",
            "getMyGigs",
            "updateGig",
            "deleteGig"
        ],
        "variables": [
            "express",
            "router",
            "authenticate",
            "gigUpload"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\messageRoutes.js": {
        "hash": "d883eb95a339ebfc007eb85934f21ec707c30e2147270764c2181d5c35391c5d",
        "summary": "This file contains route definitions for handling message-related operations in an Express.js application. It includes routes for retrieving conversations and messages, sending and deleting messages, reporting messages, blocking and unblocking conversations.",
        "functions": [
            "getAllConversationsForUser",
            "getConversationMessages",
            "sendMessage",
            "deleteMessage",
            "reportMessage",
            "blockConversation",
            "unblockConversation"
        ],
        "variables": [
            "express",
            "router",
            "authenticate"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\notificationRoutes.js": {
        "hash": "de150c2fa7892335986d2097cd808dff4664eae8b74b81e733dca9f487b31197",
        "summary": "This file defines routes for handling notification-related operations in an Express.js application. It includes endpoints for retrieving all notifications, marking a specific notification as read, marking all notifications as read, and deleting a notification. Each route requires user authentication.",
        "functions": [
            "getNotifications",
            "markAsRead",
            "markAllAsRead",
            "deleteNotification"
        ],
        "variables": [
            "router"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\reportRoutes.js": {
        "hash": "9e3dee9d150fbfb41379afe526c0f38a955de7615864a5aa11174756f89093e3",
        "summary": "This is a Node.js route file for handling report submissions. It uses Express to define a POST endpoint that requires authentication middleware. The endpoint creates a new Report instance using data from the request body and saves it to the database. If successful, it returns a success message; otherwise, it logs the error and sends an error response.",
        "functions": [
            "router.post('/', authenticate, async (req, res) => { ... })"
        ],
        "variables": [
            "reporterId",
            "creatorId",
            "contentId",
            "contentType",
            "reportDetails",
            "timestamp",
            "newReport"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\reviewRoutes.js": {
        "hash": "9b2bda5f4aebf15a30e6f23aeec391a4ae9977a982a2d75c913b9b993b0de108",
        "summary": "The file defines routes for handling reviews in an Express application. It includes endpoints to get all reviews for a user, create a new review with authentication, update a review by ID (optional), and delete a review by ID (optional).",
        "functions": [
            "getReviewsByUser",
            "createReview",
            "updateReview",
            "deleteReview"
        ],
        "variables": [
            "express",
            "router",
            "authenticate",
            "reviewController"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\userRoutes.js": {
        "hash": "d73c7b06c8c7c3ea892e15f2a21902ea0d0d801ecc8eca2fc04e847f52259f62",
        "summary": "This file contains Express.js routes for user-related operations, including getting public profiles, uploading portfolio and certifications, updating profiles, and deleting portfolio items. It uses middlewares for authentication and message uploads.",
        "functions": [
            "uploadPortfolio",
            "uploadCertifications",
            "updateProfile"
        ],
        "variables": [
            "router",
            "authenticate",
            "userController",
            "uploadMiddleware"
        ],
        "language": "JavaScript"
    },
    ".\\scripts\\importZipcode.js": {
        "hash": "40da0ea89b96247d0a7dda19755a1331d95eff453ba340a6c686263ac2103c5f",
        "summary": "The script reads zipcode data from a text file, processes it, and imports it into a MongoDB database using Mongoose.",
        "functions": [
            "fs.readFile",
            "mongoose.connect",
            "Zipcode.insertMany"
        ],
        "variables": [
            "filePath",
            "zipDocs",
            "err",
            "data",
            "lines"
        ],
        "language": "JavaScript"
    },
    ".\\services\\zipcodeService.js": {
        "hash": "e00bd113b4edbb285887919e70e148a0dbff6b03f05fb44af7b8e251280dd713",
        "summary": "The zipcodeService.js file contains two asynchronous functions for finding ZIP codes within a specified radius. It uses MongoDB geospatial queries to find nearby ZIP codes and returns them as an array.",
        "functions": [
            "findZipcodesWithin",
            "findZipcodesWithinWithDistance"
        ],
        "variables": [],
        "language": "JavaScript"
    },
    ".\\strategies\\passportStrategies.js": {
        "hash": "7bd14654b1bcd33ad7f2b29dbf0725006d31c2add2076a2fa6389273ce881f71",
        "summary": "The file contains configuration for Passport.js strategies, including Google, Apple, and Facebook OAuth authentication. It also includes serialization and deserialization functions using JWT to manage user sessions.",
        "functions": [
            "serializeUser",
            "deserializeUser"
        ],
        "variables": [
            "passport",
            "GoogleStrategy",
            "AppleStrategy",
            "FacebookStrategy",
            "User",
            "jwt"
        ],
        "language": "JavaScript"
    },
    ".\\test\\index.html": {
        "hash": "d4a132981d5a4f7e2fbfe11d1d6c17a54f0c5f278e1fdf6a6e4f324de1ebf408",
        "summary": "The HTML file 'index.html' is a prototype for a gig platform, containing sections for user registration and login. It includes forms with fields for name, email, and password, along with message paragraphs for feedback.",
        "functions": [],
        "variables": [],
        "language": "HTML"
    },
    ".\\test\\testRegime.js": {
        "hash": "25f9b575cdeb082e8b0ee281d16fb07cfb23ca63087aea8d1f7dc88b0e1407e0",
        "summary": "The file 'testRegime.js' is a Node.js script that sets up an API testing environment. It uses Axios for HTTP requests and dotenv for configuration management. The script defines endpoints for user registration and login, manages user sessions with tokens, and includes helper functions for API interactions.",
        "functions": [
            "registerUser",
            "loginUser"
        ],
        "variables": [
            "API_BASE",
            "corsOptions",
            "users",
            "gigs",
            "bids"
        ],
        "language": "JavaScript"
    },
    ".\\utils\\socketHandlers.js": {
        "hash": "427909d5a5980efc43c4200fda8a51c0a33b1641a84d332c95128a209d0d73e9",
        "summary": "This JavaScript file sets up Socket.IO for real-time communication, including JWT authentication and managing online users for notifications.",
        "functions": [
            "setupSocketIO",
            "io.use (middleware function)",
            "io.on ('connection')",
            "socket.on ('joinConversation')"
        ],
        "variables": [
            "onlineUsers"
        ],
        "language": "JavaScript"
    },
    ".\\utils\\socketIOInstance.js": {
        "hash": "bbca1e98858822964ae1b74b1443ffbc2a30e370680aed1ba1e95e8ea33f801e",
        "summary": "This JavaScript file exports functions to initialize and retrieve a Socket.IO server instance, configured with CORS settings and connection state recovery options. It also handles 'ping'/'pong' events for client-server communication.",
        "functions": [
            "init",
            "getIO"
        ],
        "variables": [
            "io"
        ],
        "language": "JavaScript"
    },
    ".\\index.json": {
        "hash": "4919d734ca25c80ca16f5c249a220a68699d941e257cf2ebe236260b6e8494c2",
        "summary": "The index.json file contains configuration settings for a server, including environment variables for setting up a server port, JWT secret, MongoDB URI, frontend origin, and OAuth credentials for Google and Apple.",
        "functions": [],
        "variables": [
            "SERVER_PORT",
            "JWT_SECRET",
            "MONGO_URI",
            "FRONTEND_ORIGIN",
            "GOOGLE_CLIENT_ID",
            "GOOGLE_CLIENT_SECRET",
            "GOOGLE_CALLBACK_URL",
            "APPLE_CLIENT_ID",
            "APPLE_TEAM_ID",
            "APPLE_KEY_ID",
            "APPLE_PRIVATE_KEY",
            "APPLE_CALLBACK_URL"
        ],
        "language": "Environment variables configuration (dotenv)"
    },
    ".\\client\\src\\assets\\mascot.svg": {
        "hash": "8399da4cf5ea55d792932e0fe1c29ff8e2f2363bf1d698b13394b2c18671edb1",
        "summary": "The file contains an SVG image representing a mascot. The SVG is defined with paths and attributes specifying its shape, color, and size.",
        "functions": [],
        "variables": [],
        "language": "SVG"
    },
    ".\\client\\src\\components\\RatingChart.jsx": {
        "hash": "e67d01449d1bb1a6ccdff06a3d93581be6cfa6bbab337be05a2016199deaa400",
        "summary": "This is a React component, RatingChart, which renders a star rating distribution chart based on an array of review objects. It calculates the distribution of ratings and displays them as horizontal bars with colored gradients.",
        "functions": [
            "RatingChart"
        ],
        "variables": [
            "reviews",
            "className",
            "ratingCounts",
            "totalReviews",
            "count",
            "percentage"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\SkillBadge.jsx": {
        "hash": "52fc389dcc2a999072f32473cfad9b70395814464fa8eb7ac17d227462cdc389",
        "summary": "The SkillBadge.jsx file defines a React component called SkillBadge that uses Framer Motion for interactive animations. It takes three props: icon, label, and an optional className. The component renders a styled div with a blue icon and text label, scaling slightly on hover.",
        "functions": [
            "SkillBadge"
        ],
        "variables": [
            "icon",
            "label",
            "className"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\components\\ui\\checkbox.tsx": {
        "hash": "fa9b3554704e038c279016002efabb596c32a9fca04e8148cbddd8e8d509c412",
        "summary": "The file defines a custom Checkbox component using React and Radix UI primitives. It includes styling for various states like checked, disabled, and focus states.",
        "functions": [
            "Checkbox"
        ],
        "variables": [
            "className",
            "props",
            "ref"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\components\\ui\\dropdown-menu.tsx": {
        "hash": "755aea690889343eb417f2557e1bc6a0381da3b5aef826989967b373b84574dd",
        "summary": "The file contains a TypeScript component for a dropdown menu using Radix UI primitives. It includes various sub-components like Trigger, Group, Portal, Sub, RadioGroup, and SubTrigger with custom styling and behavior.",
        "functions": [
            "DropdownMenuSubTrigger"
        ],
        "variables": [
            "DropdownMenu",
            "DropdownMenuTrigger",
            "DropdownMenuGroup",
            "DropdownMenuPortal",
            "DropdownMenuSub",
            "DropdownMenuRadioGroup"
        ],
        "language": "TypeScript"
    },
    ".\\client\\src\\pages\\GamificationGuide.jsx": {
        "hash": "b80520521468c9ee0098bea78aa35dd5396da62b1d37f56c94705f8ff0fa0ae6",
        "summary": "This is a React component called GamificationGuide, which presents features of a gamified platform with icons and descriptions. It uses the Framer Motion library for animations and imports various icons from Lucide React. The component defines an array of feature objects, each containing an icon, title, and content detailing how users can earn rewards.",
        "functions": [],
        "variables": [
            "features"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\Leaderboard.jsx": {
        "hash": "596e3e827ab4e65d8acb2204f02387812b53d86f3d20967ad725e9eb8f7ff5db",
        "summary": "The file contains a React component for a leaderboard page that uses Framer Motion for animations, Axios for API requests, and Lucide React icons. It also includes a skeleton loading component to display while data is being fetched.",
        "functions": [
            "SkeletonRow"
        ],
        "variables": [
            "motion",
            "AnimatePresence",
            "useState",
            "useContext",
            "useEffect",
            "AuthContext",
            "Link",
            "useNavigate",
            "axios",
            "Trophy",
            "Award",
            "Zap",
            "Clock",
            "Flame",
            "Star",
            "Gem",
            "Crown",
            "Mascot"
        ],
        "language": "JavaScript"
    },
    ".\\client\\src\\pages\\ViewRewards.jsx": {
        "hash": "26bd78024c8cb909f1a192754f55ff852db6d74ffb149e79e3004d8bb7e8a06b",
        "summary": "The file ViewRewards.jsx is a React component that displays user reward tiers. It uses Framer Motion for animations and imports various icons from Lucide React for visual representation. The component includes a skeleton loading screen to improve UX during data fetching.",
        "functions": [
            "SkeletonCard",
            "RewardTier"
        ],
        "variables": [
            "title",
            "xpRequired",
            "currentXP",
            "rewards",
            "icon",
            "color",
            "progress"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\bookmarkController.js": {
        "hash": "e2d0babcaaf019e670401564077f80f419db7fcf7d256efce0e5c77cfbcc234a",
        "summary": "This JavaScript file contains two functions for handling bookmark operations related to gigs. It checks if a gig is bookmarked by a user and toggles the bookmark status.",
        "functions": [
            "checkBookmarkStatus",
            "toggleBookmark"
        ],
        "variables": [
            "Bookmark",
            "Gig"
        ],
        "language": "JavaScript"
    },
    ".\\controllers\\leaderboardController.js": {
        "hash": "17cbfc242739826a1d335494b45c9a3588ce92fcb9ddc72a915bd655947d1379",
        "summary": "The leaderboardController.js file exports a function to retrieve user data sorted by experience points (xp) within a specified timeframe. It filters users based on query parameters ('weekly' or 'monthly'), sorts them, and limits the results to 100 users. The controller also adds rank information to each user in the response.",
        "functions": [
            "getLeaderboard"
        ],
        "variables": [
            "timeframe",
            "dateFilter",
            "users",
            "rankedUsers"
        ],
        "language": "JavaScript"
    },
    ".\\models\\Bookmark.js": {
        "hash": "1baa3a5c45504a22e9c73d808aaa4e26a4efadc506c07ae84e8e10afd4ded2a6",
        "summary": "The Bookmark.js file defines a Mongoose schema for bookmarking gigs by users. It includes fields for user ID, gig ID, and creation timestamp, with a unique compound index on user_id and gig_id to prevent duplicate bookmarks.",
        "functions": [
            "mongoose.Schema"
        ],
        "variables": [
            "bookmarkSchema",
            "user_id",
            "gig_id",
            "created_at"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\bookmarkRoutes.js": {
        "hash": "81d47a333753a97f43aed59076e5b3c6f530f0d365fc4d5eb44252b5c356b1ae",
        "summary": "This file defines routes for bookmark-related operations in an Express.js application. It includes middleware for authentication and controllers for checking bookmark status, toggling bookmarks, and retrieving user bookmarks.",
        "functions": [
            "checkBookmarkStatus",
            "toggleBookmark",
            "getUserBookmarks"
        ],
        "variables": [
            "express",
            "router",
            "authenticate",
            "checkBookmarkStatus",
            "toggleBookmark",
            "getUserBookmarks"
        ],
        "language": "JavaScript"
    },
    ".\\routes\\leaderboardRoutes.js": {
        "hash": "bd5dfba9678bd34f7c1fbc7fea4153f345b2099b1957e605727f5901fd82be94",
        "summary": "This is a JavaScript file for setting up routes related to a leaderboard. It uses Express.js to define a GET route that calls the 'getLeaderboard' function from the '../controllers/leaderboardController' module.",
        "functions": [
            "getLeaderboard"
        ],
        "variables": [
            "express",
            "router"
        ],
        "language": "JavaScript"
    },
    ".\\tests\\attachmentController.test.js": {
        "hash": "fd6fbb58c06717de37f2030be487dbb24c4c0a21c36c1a682fc30daa050e14d4",
        "summary": "The file contains test cases for an Attachment Controller using Chai and Sinon for mocking. It tests functionalities like uploading attachments and deleting them, ensuring proper handling of errors and successful operations.",
        "functions": [
            "uploadAttachmentGeneral",
            "deleteAttachment"
        ],
        "variables": [
            "Attachment",
            "fsStub",
            "controller"
        ],
        "language": "JavaScript"
    },
    ".\\tests\\authController.test.js": {
        "hash": "5d8a06e4bdfeb980d12f64fec811f757731fc10d1c4db48f5e072606b6e46a4a",
        "summary": "The file contains unit tests for an authentication controller using Chai, Sinon, and Proxyquire. It mocks user models, bcrypt for password hashing, and JWT for token signing to test registration and login functionalities.",
        "functions": [
            "registerUser"
        ],
        "variables": [
            "User",
            "bcryptStub",
            "jwtStub",
            "controller"
        ],
        "language": "JavaScript"
    },
    ".\\tests\\bidController.test.js": {
        "hash": "aee42ed784f9ca129a3f25f5b06bbf42b0da5a2ae182d0b166d954536247419f",
        "summary": "The file contains unit tests for a Bid Controller using Chai, Sinon, and Proxyquire. It sets up mocks for various models like Bid, Gig, Notification, Message, and Conversation to test controller methods.",
        "functions": [
            "findOne",
            "find",
            "save",
            "deleteOne"
        ],
        "variables": [
            "Bid",
            "Gig",
            "Notification",
            "Message",
            "Conversation",
            "controller"
        ],
        "language": "JavaScript"
    },
    ".\\tests\\gigController.test.js": {
        "hash": "de67127e6e6b6838327a22d3a66b830c145873c6a92d631dee841cd7ed85a727",
        "summary": "This file contains unit tests for a Gig Controller using Chai, Sinon, and Proxyquire. It sets up mock objects for Gig, Attachment, and Bid models to test various controller functions.",
        "functions": [
            "find",
            "countDocuments",
            "findById",
            "deleteMany"
        ],
        "variables": [
            "Gig",
            "Attachment",
            "Bid",
            "controller"
        ],
        "language": "JavaScript"
    },
    ".\\tests\\index.html": {
        "hash": "e096dc6ddce2775b4d2873cb2f6e46cadb8b23d7ac8b0d03de253e287d5d6757",
        "summary": "The file is an HTML document for a Gig Platform Prototype, featuring registration and login forms with validation.",
        "functions": [],
        "variables": [],
        "language": "HTML"
    },
    ".\\tests\\messageController.test.js": {
        "hash": "fe43e5df22048618888ac862e4ec7f23c2228c47bc4a114dbf0fdf5d2643c7f3",
        "summary": "The file contains unit tests for a Message Controller using Chai, Sinon, and Proxyquire. It mocks models like Conversation, Message, and Notification to test various functionalities such as finding, saving, and deleting messages and conversations.",
        "functions": [
            "describe",
            "beforeEach"
        ],
        "variables": [
            "chai",
            "sinon",
            "proxyquire",
            "expect",
            "Conversation",
            "Message",
            "Notification",
            "controller"
        ],
        "language": "JavaScript"
    },
    ".\\tests\\testRegime.js": {
        "hash": "4ba7ea742953a80b7134f8a0897a4b0861ec169d956452e765456b6b4666e5b4",
        "summary": "The file 'testRegime.js' contains code for setting up a test environment and defining functions to interact with an API. It uses Axios for HTTP requests, dotenv for environment variables, and defines arrays for users, gigs, and bids.",
        "functions": [
            "registerUser",
            "loginUser"
        ],
        "variables": [
            "API_BASE",
            "corsOptions",
            "users",
            "gigs",
            "bids"
        ],
        "language": "JavaScript"
    }
}